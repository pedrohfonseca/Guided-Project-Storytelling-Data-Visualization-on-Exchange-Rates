# -*- coding: utf-8 -*-
"""Basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ha2205EAozWmllSY9GKnXVfglwTOyhA5

# Guided Project: Storytelling Data Visualization on Exchange Rates

This file has the Euro daily exchange rates between 1999 and 2021

### Reading the dataset
"""

import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import matplotlib.style as style
from functions import read_data
from functions import calculate_rolling_mean
from functions import to_datetime

exchange_rates = read_data(
    '''https://github.com/pedrohfonseca/
    Guided-Project-Storytelling-Data-Visualization-on-Exchange-Rates/
    blob/main/databases/euro-daily-hist_1999_2021.csv?raw=true''')

exchange_rates.head()

exchange_rates.tail()

exchange_rates.info()

exchange_rates.rename(columns={r'Period\Unit:': 'Time', '[US dollar ]': 'US_dollar'},
                      inplace=True)
exchange_rates['Time'] = to_datetime(exchange_rates['Time'])
exchange_rates.sort_values('Time', ascending=True, inplace=True)
exchange_rates.reset_index(drop=True, inplace=True)
exchange_rates.head()

euro_to_dollar = exchange_rates[['Time', 'US_dollar']].copy()
euro_to_dollar['US_dollar'].value_counts()

euro_to_dollar = euro_to_dollar[euro_to_dollar['US_dollar'] != '-']
euro_to_dollar['US_dollar'] = euro_to_dollar['US_dollar'].astype(float)
euro_to_dollar.info()
euro_to_dollar.loc[:5,:].to_csv('dados_resumo.csv')

# Commented out IPython magic to ensure Python compatibility.

plt.plot(euro_to_dollar['Time'],
         euro_to_dollar['US_dollar'])
plt.show()

fig, ax = plt.subplots(figsize=(9,6))

plt.subplot(3, 2, 1)
plt.plot(euro_to_dollar['Time'],
         euro_to_dollar['US_dollar'])
plt.title('Original values', weight='bold')

for i, rolling_mean in zip([2, 3, 4, 5, 6],
                           [7, 30, 50, 100, 365]):
    plt.subplot(3, 2, i)
    plt.plot(euro_to_dollar['Time'],
             calculate_rolling_mean(euro_to_dollar['US_dollar'], rolling_mean))
    plt.title('Rolling Windows: ' + str(rolling_mean),
              weight='bold')
plt.tight_layout()
plt.show()

euro_to_dollar['rolling_mean'] = calculate_rolling_mean(
    euro_to_dollar['US_dollar'],30)
euro_to_dollar.tail()

plt.plot(euro_to_dollar['Time'],
         euro_to_dollar['rolling_mean'])
plt.show()

financial_crisis = euro_to_dollar.copy()[(euro_to_dollar['Time'].dt.year >= 2006)
                                         & (euro_to_dollar['Time'].dt.year < 2010)]
financial_crisis_07_08 = euro_to_dollar.copy()[(euro_to_dollar['Time'].dt.year >= 2007)
                                               & (euro_to_dollar['Time'].dt.year <= 2008)]

# Adding the FiveThirtyEight style
style.use('fivethirtyeight')

# Ploting the graphs with the rolling mean of financial crisis
fig, ax = plt.subplots(figsize=(8,3))
ax.plot(financial_crisis['Time'],
        financial_crisis['rolling_mean'],
        linewidth=1, color='#A6D785')
ax.plot(financial_crisis_07_08['Time'],
        financial_crisis_07_08['rolling_mean'],
        linewidth=3, color='#e23d28')

# Removing the labels
ax.set_xticklabels([])
ax.set_yticklabels([])

# Evidencing the peak of crisis
ax.axvspan(xmin=733100.0, xmax=733300.0, ymin=0.09,
           alpha=0.3, color='grey')

# Adding the x-label
X = 732270.0
Y = 1.13
for year in ['2006', '2007', '2008', '2009', '2010']:
    ax.text(X, Y, s=year, alpha=0.5, fontsize=11)
    X += 365

# Adding the y-label
X = 732170.0
Y = 1.193
for rate in ['1.2', '1.3', '1.4', '1.5']:
    ax.text(X, Y, s=rate, alpha=0.5, fontsize=11)
    Y += 0.1

# Adding the title and subtitle
ax.text(732170.0, 1.67, s="Euro-USD rate peaked at 1.59 during 2007-2008's financial crisis",
        weight='bold')
ax.text(732170.0, 1.63, s="Euro-USD exchange rates between 2006 and 2010",
        size=12)

# Adding a signature
ax.text(732170.0, 1.07, s='©DATAQUEST' + ' '*94 + 'Source: European Central Bank',
        color='#f0f0f0', backgroundcolor = '#4d4d4d', size=10)

# Change grid transparency
ax.grid(alpha=0.5)
plt.show()

bush_obama_trump_biden = euro_to_dollar.copy()[euro_to_dollar['Time'].dt.year >= 2001]

bush = bush_obama_trump_biden.copy()[bush_obama_trump_biden['Time'].dt.year < 2009]
obama = bush_obama_trump_biden.copy()[(bush_obama_trump_biden['Time'].dt.year >= 2009)
                                & (bush_obama_trump_biden['Time'].dt.year < 2017)]
trump = bush_obama_trump_biden.copy()[(bush_obama_trump_biden['Time'].dt.year >= 2017)
                                & (bush_obama_trump_biden['Time'].dt.year < 2021)]
biden = bush_obama_trump_biden.copy()[bush_obama_trump_biden['Time'].dt.year >= 2021]

# Adding the FiveThirtyEight style
style.use('fivethirtyeight')

# Adding subplots
plt.figure(figsize=(12, 6))
ax1 = plt.subplot(2, 4, 1)
ax2 = plt.subplot(2, 4, 2)
ax3 = plt.subplot(2, 4, 3)
ax4 = plt.subplot(2, 4, 4)
ax5 = plt.subplot(2, 1, 2)
axes = [ax1, ax2, ax3, ax4, ax5]

for ax in axes:
    ax.set_ylim(0.8, 1.7)
    ax.set_yticks([1.0, 1.2, 1.4, 1.6])
    ax.set_yticklabels(['1.0', '1.2', '1.4', '1.6'], alpha=0.5)
    ax.grid(alpha=0.5)

# Bush graph
ax1.plot(bush['Time'], bush['rolling_mean'],
         color='#BF5FFF')
ax1.set_xticklabels(['', '2001', '', '', '',  '2005', '', '', '', '2009'],
                    alpha=0.5)
ax1.text(731520.0, 1.92, s='BUSH', weight='bold',
        color='#BF5FFF', fontsize=18)
ax1.text(731220.0, 1.8, s='(2001-2009)', weight='bold',
         alpha=0.5)

# Obama graph
ax2.plot(obama['Time'], obama['rolling_mean'],
         color='#ffa500')
ax2.set_xticklabels(['', '2009', '', '', '', '2013', '', '', '', '2017'],
                    alpha=0.5)
ax2.text(734220.0, 1.92, s='OBAMA', weight='bold',
        color='#ffa500', fontsize=18)
ax2.text(734100.0, 1.8, s='(2009-2017)', weight='bold',
         alpha=0.5)

# Trump graph
ax3.plot(trump['Time'], trump['rolling_mean'],
         color='#00B2EE')
ax3.set_xticklabels(['', '2017', '', '', '2019', '', '', '2021'],
                    alpha=0.5)
ax3.text(736650.0, 1.92, s='TRUMP', weight='bold',
        color='#00B2EE', fontsize=18)
ax3.text(736550.0, 1.8, s='(2017-2021)', weight='bold',
         alpha=0.5)

# Biden graph
ax4.plot(biden['Time'], biden['rolling_mean'],
         color='#1AE862')
ax4.set_xticklabels(['', '', '', '', '2021'],
                    alpha=0.5)
ax4.text(737845.0, 1.92, s='BIDEN', weight='bold',
        color='#1AE862', fontsize=18)
ax4.text(737850.0, 1.8, s='(2021-)', weight='bold',
         alpha=0.5)

# Bush-Obama-Trump-Biden graph
ax5.plot(bush['Time'], bush['rolling_mean'],
         color='#BF5FFF')
ax5.plot(obama['Time'], obama['rolling_mean'],
         color='#ffa500')
ax5.plot(trump['Time'], trump['rolling_mean'],
         color='#00B2EE')
ax5.plot(biden['Time'], biden['rolling_mean'],
         color='#1AE862')
ax5.grid(alpha=0.5)
ax5.set_xticklabels([])

# Adding a title and subtitle
ax1.text(730000.0, 2.35, s='''EURO-USD rate averaged 1.22 under
the last four US presidents''', weight='bold', fontsize=20)
ax1.text(730000.0, 2.14, s='''EURO-USD exchange rates under
George W. Bush (2001-2009), Barack Obama (2009-2017),
Donald Trump (2017-2021) and Joe Biden (2021-)''', fontsize=16)

# Adding a signature
ax5.text(729900.0, 0.65, s='©DATAQUEST' + ' '*103 + 'Source: European Central Bank',
        color = '#f0f0f0', backgroundcolor = '#4d4d4d',
        size=14)
plt.show()

exchange_real_1 = read_data(
    '''https://github.com/pedrohfonseca/
    Guided-Project-Storytelling-Data-Visualization-on-Exchange-Rates/
    blob/main/databases/USD_BRL%20Dados%20Hist%C3%B3ricos.csv?raw=true''')
exchange_real_2 = read_data(
    '''https://github.com/pedrohfonseca/
    Guided-Project-Storytelling-Data-Visualization-on-Exchange-Rates/
    blob/main/databases/USD_BRL%20Dados%20Hist%C3%B3ricos_2.csv?raw=true''')
exchange_real = pd.merge(exchange_real_1, exchange_real_2, how='outer')
exchange_real.head()

exchange_real.tail()

exchange_real.info()

exchange_real.rename(columns={r'Data': 'Time'}, inplace=True)
exchange_real['Time'] = to_datetime(exchange_real['Time'])
exchange_real.sort_values('Time', ascending=True, inplace=True)
exchange_real.reset_index(drop=True, inplace=True)
exchange_real.head()

dollar_to_real = exchange_real[['Time', 'Máxima']].copy()
dollar_to_real.rename(columns={r'Máxima': 'brl_value'}, inplace=True)
dollar_to_real['brl_value'].value_counts()

dollar_to_real['brl_value'] = dollar_to_real['brl_value'].str.replace(',','.')
dollar_to_real['brl_value'] = dollar_to_real['brl_value'].astype(float)
dollar_to_real.info()

style.use('default')

fig, ax = plt.subplots(figsize=(9,6))

plt.subplot(3, 2, 1)
plt.plot(dollar_to_real['Time'],
         dollar_to_real['brl_value'])
plt.title('Original values', weight='bold')

for i, rolling_mean in zip([2, 3, 4, 5, 6],
                           [7, 30, 50, 100, 365]):
    plt.subplot(3, 2, i)
    plt.plot(dollar_to_real['Time'], calculate_rolling_mean(
        dollar_to_real['brl_value'],rolling_mean))
    plt.title('Rolling Windows: ' + str(rolling_mean),
              weight='bold')
plt.tight_layout()
plt.show()

dollar_to_real['rolling_mean'] = calculate_rolling_mean(
    dollar_to_real['brl_value'],50)
plt.plot(dollar_to_real['Time'], dollar_to_real['rolling_mean'])

fhc = dollar_to_real.copy()[dollar_to_real['Time'].dt.year < 2003]
lula = dollar_to_real.copy()[(dollar_to_real['Time'].dt.year >= 2003)
                             & (dollar_to_real['Time'].dt.year < 2011)]
dilma = dollar_to_real.copy()[(dollar_to_real['Time'].dt.year >= 2011)
                             & (dollar_to_real['Time'].dt.year < 2017)
                             & (dollar_to_real['Time'].dt.month < 9)
                             & (dollar_to_real['Time'].dt.day <= 31)]
temer = dollar_to_real.copy()[(dollar_to_real['Time'].dt.year >= 2016)
                             & (dollar_to_real['Time'].dt.month >= 9)
                             & (dollar_to_real['Time'].dt.day >= 1)
                             & (dollar_to_real['Time'].dt.year < 2019)]
bolso = dollar_to_real.copy()[dollar_to_real['Time'].dt.year >= 2019]
covid = dollar_to_real.copy()[(dollar_to_real['Time'].dt.year >= 2020)
                            & (dollar_to_real['Time'].dt.month >= 3)
                            & (dollar_to_real['Time'].dt.day >= 1)]

# Adding the FiveThirtyEight style
style.use('fivethirtyeight')

# Adding subplots
plt.figure(figsize=(12, 6))
ax1 = plt.subplot(2, 1, 1)
ax2 = plt.subplot(2, 1, 2)

# Graph
ax1.plot(fhc['Time'], fhc['rolling_mean'],
         color='#1a66e8')
ax1.plot(lula['Time'], lula['rolling_mean'],
         color='#d91111')
ax1.plot(dilma['Time'], dilma['rolling_mean'],
         color='#8611d9')
ax1.plot(temer['Time'], temer['rolling_mean'],
         color='#1AE862')
ax1.plot(bolso['Time'], bolso['rolling_mean'],
         color='#e8a71a')
ax1.grid(alpha=0.5)
ax1.set_xticklabels([])
ax1.set_xticklabels(['', '1996', '2000',  '2004', '2008', '2012', '2016', '2020'],
                    alpha=0.5)

ax1.set_ylim(0.8, 6)
ax1.set_yticks([1.0, 2.0, 3.0, 4.0, 5.0])
ax1.set_yticklabels(['1.0', '2.0', '3.0', '4.0', '5.0'], alpha=0.5)
ax1.grid(alpha=0.5)
ax1.legend(['FHC', 'Lula', 'Dilma', 'Temer', 'Bolsonaro'])

ax1.axvspan(xmin=737500.0, xmax=738150.0, ymin=0.03,
           alpha=0.3, color='grey')

ax2.set_facecolor("#d1d1d1")
ax2.plot(covid['Time'], covid['rolling_mean'],
         color='#e8a71a')
ax2.set_xticklabels([])
ax2.set_xticklabels(['april 2020', 'july 2020',  'october 2020', 'january 2021',
                     'april 2021', 'july 2021', 'october 2021'], alpha=0.5,
                     rotation=30)
ax2.set_ylim(4.6, 5.6)
ax2.set_yticks([4.6, 4.8, 5.0, 5.2, 5.4])
ax2.set_yticklabels(['4.6', '4.8', '5.0', '5.2', '5.4'], alpha=0.5)
ax2.grid(color='grey', alpha=0.3)

# Adding a title and subtitle
ax1.text(727400.0, 7.54, s='''USD-BRL rate averaged 1995 and the peak with
covid pandemic.''', weight='bold', fontsize=18)
ax1.text(727400.0, 6.34, s='''USD-BRL exchange rates under
Fernando Henrique (1995-2003), Luiz Inácio da Silva (2003-2011), 
Dilma Rousseff (2011-2016), Michel Temer (2016-2019)
and Jair Bolsonaro (2019-)''', fontsize=16)

# Adding a signature
ax2.text(737420.0, 4.1, s='©DATAQUEST' + ' '*115 + 'Source: investing.com',
        color = '#f0f0f0', backgroundcolor = '#4d4d4d', size=14)
plt.show()
